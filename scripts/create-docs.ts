/**
 * Script pour cr√©er les pages de documentation dans le CMS
 * Usage: npx ts-node scripts/create-docs.ts
 */

import axios from 'axios';

const API_URL = 'http://localhost:3001/api';
const ADMIN_TOKEN = process.env.ADMIN_TOKEN || 'YOUR_ADMIN_JWT_TOKEN';

const api = axios.create({
  baseURL: API_URL,
  headers: {
    'Authorization': `Bearer ${ADMIN_TOKEN}`,
    'Content-Type': 'application/json',
  },
});

const docs = [
  {
    title: 'Serveur MCP - Guide d\'installation',
    slug: 'mcp-server',
    excerpt: 'Installez et configurez le serveur MCP pour utiliser BetTracker Pro avec Claude Desktop',
    content: `
# ü§ñ Serveur MCP - Guide d'installation

## Qu'est-ce que le serveur MCP ?

Le serveur MCP (Model Context Protocol) permet d'utiliser tous les outils BetTracker Pro directement dans Claude Desktop ou ChatGPT. Vous pouvez poser des questions en langage naturel et l'IA utilisera vos donn√©es en temps r√©el.

## üìã Pr√©requis

- Node.js 18+ install√©
- BetTracker Pro backend en cours d'ex√©cution
- Une cl√© API BetTracker (g√©n√©rez-la dans vos param√®tres)

## üöÄ Installation

### 1. Installation des d√©pendances

\`\`\`bash
cd mcp-server
npm install
npm run build
\`\`\`

### 2. Configuration

Cr√©ez un fichier \`.env\` :

\`\`\`env
BETTRACKER_API_URL=http://localhost:3001
BETTRACKER_API_KEY=votre_cl√©_api_ici
\`\`\`

### 3. Configuration Claude Desktop

**macOS** : √âditez \`~/Library/Application Support/Claude/claude_desktop_config.json\`

**Linux** : √âditez \`~/.config/Claude/claude_desktop_config.json\`

**Windows** : √âditez \`%APPDATA%\\Claude\\claude_desktop_config.json\`

Ajoutez cette configuration :

\`\`\`json
{
  "mcpServers": {
    "bettracker-pro": {
      "command": "node",
      "args": ["/chemin/absolu/vers/netboot/mcp-server/dist/index.js"],
      "env": {
        "BETTRACKER_API_URL": "http://localhost:3001",
        "BETTRACKER_API_KEY": "votre_cl√©_api"
      }
    }
  }
}
\`\`\`

### 4. Red√©marrez Claude Desktop

Fermez compl√®tement Claude Desktop et relancez-le.

## ‚úÖ Test

Ouvrez Claude Desktop et tapez :

> "Montre-moi mes statistiques de paris du mois"

Claude devrait utiliser l'outil \`get_user_stats\` et vous afficher vos statistiques !

## üõ†Ô∏è Outils disponibles

Le serveur MCP expose 11 outils :

### Gestion des Paris
- \`get_user_stats\` - Statistiques de paris
- \`get_recent_bets\` - Derniers paris
- \`get_budget_status\` - √âtat du budget
- \`get_user_settings\` - Param√®tres

### Statistiques PMU
- \`get_pmu_stats\` - Vue d'ensemble PMU
- \`get_my_hippodromes\` - Liste des hippodromes
- \`get_hippodrome_stats\` - Stats par hippodrome
- \`get_my_bet_horses\` - Performances des chevaux
- \`get_my_jockey_stats\` - Stats des jockeys
- \`get_my_horse_jockey_combinations\` - Combinaisons
- \`get_my_cross_stats\` - Statistiques crois√©es

## üêõ D√©pannage

### Les outils ne s'affichent pas

1. V√©rifiez le chemin absolu dans la configuration
2. V√©rifiez que le backend est d√©marr√©
3. Consultez les logs : \`~/Library/Logs/Claude/mcp-server-bettracker-pro.log\`

### Erreur d'authentification

V√©rifiez que votre cl√© API est correcte dans le fichier de configuration.

## üìö Ressources

- [Documentation compl√®te](https://github.com/bettracker/mcp-server)
- [Exemples d'utilisation](/docs/examples)
- [API REST](/docs/api)
`,
    status: 'published',
    seoTitle: 'Serveur MCP BetTracker Pro - Installation Claude Desktop',
    seoDescription: 'Guide complet pour installer et configurer le serveur MCP BetTracker Pro avec Claude Desktop',
    seoKeywords: 'mcp, claude desktop, bettracker, installation, configuration',
  },
  {
    title: 'API REST - Documentation',
    slug: 'api',
    excerpt: 'Documentation compl√®te de l\'API REST BetTracker Pro pour cr√©er vos propres int√©grations',
    content: `
# üåê API REST - Documentation

## Introduction

L'API REST BetTracker Pro vous permet d'acc√©der √† toutes vos donn√©es de paris depuis n'importe quelle application. Authentifiez-vous avec votre cl√© API et commencez √† construire !

## üîë Authentification

Toutes les requ√™tes n√©cessitent une cl√© API dans le header :

\`\`\`
X-API-Key: btk_votre_cl√©_ici
\`\`\`

G√©n√©rez votre cl√© API dans **Param√®tres** > **Cl√© API**.

## üì° Endpoints

### Base URL

\`\`\`
http://localhost:3001/api/v1
\`\`\`

### Lister les outils

\`\`\`bash
GET /tools/list
\`\`\`

**R√©ponse :**
\`\`\`json
{
  "tools": [
    {
      "name": "get_user_stats",
      "description": "Obtenir les statistiques de paris",
      "parameters": {
        "period": { "type": "string", "enum": ["all", "month", "week"] }
      }
    }
  ]
}
\`\`\`

### Ex√©cuter un outil

\`\`\`bash
POST /tools/execute
Content-Type: application/json

{
  "tool": "get_user_stats",
  "arguments": {
    "period": "month"
  }
}
\`\`\`

**R√©ponse :**
\`\`\`json
{
  "success": true,
  "tool": "get_user_stats",
  "data": {
    "period": "month",
    "total_bets": 45,
    "won": 23,
    "lost": 18,
    "win_rate": "56.1%",
    "total_profit": "125.50‚Ç¨",
    "roi": "27.9%"
  }
}
\`\`\`

## üìù Exemples

### JavaScript / Node.js

\`\`\`javascript
const API_KEY = 'btk_votre_cl√©';
const API_URL = 'http://localhost:3001/api/v1';

async function getUserStats() {
  const response = await fetch(\`\${API_URL}/tools/execute\`, {
    method: 'POST',
    headers: {
      'X-API-Key': API_KEY,
      'Content-Type': 'application/json'
    },
    body: JSON.stringify({
      tool: 'get_user_stats',
      arguments: { period: 'month' }
    })
  });
  
  return response.json();
}
\`\`\`

### Python

\`\`\`python
import requests

API_KEY = 'btk_votre_cl√©'
API_URL = 'http://localhost:3001/api/v1'

def get_user_stats():
    response = requests.post(
        f'{API_URL}/tools/execute',
        headers={'X-API-Key': API_KEY},
        json={
            'tool': 'get_user_stats',
            'arguments': {'period': 'month'}
        }
    )
    return response.json()
\`\`\`

### cURL

\`\`\`bash
curl -X POST http://localhost:3001/api/v1/tools/execute \\
  -H "X-API-Key: btk_votre_cl√©" \\
  -H "Content-Type: application/json" \\
  -d '{"tool":"get_user_stats","arguments":{"period":"month"}}'
\`\`\`

## üõ°Ô∏è S√©curit√©

- ‚úÖ Ne partagez jamais votre cl√© API
- ‚úÖ Utilisez HTTPS en production
- ‚úÖ R√©voquez les cl√©s compromises imm√©diatement
- ‚úÖ R√©g√©n√©rez vos cl√©s r√©guli√®rement

## üìä Limites

- **Rate limit** : 100 requ√™tes / minute
- **Timeout** : 30 secondes par requ√™te
- **Taille max** : 1 MB par requ√™te

## üîÑ Codes d'erreur

| Code | Description |
|------|-------------|
| 200 | Succ√®s |
| 400 | Requ√™te invalide |
| 401 | Cl√© API invalide |
| 404 | Outil non trouv√© |
| 429 | Trop de requ√™tes |
| 500 | Erreur serveur |

## üìö Ressources

- [Serveur MCP](/docs/mcp-server)
- [Exemples de code](/docs/examples)
- [Int√©gration ChatGPT](/docs/chatgpt)
`,
    status: 'published',
    seoTitle: 'API REST BetTracker Pro - Documentation compl√®te',
    seoDescription: 'Documentation de l\'API REST BetTracker Pro avec exemples en JavaScript, Python et cURL',
    seoKeywords: 'api rest, bettracker, documentation, javascript, python, curl',
  },
  {
    title: 'Int√©gration ChatGPT',
    slug: 'chatgpt',
    excerpt: 'Utilisez BetTracker Pro avec ChatGPT via Custom GPT ou l\'API OpenAI',
    content: `
# üí¨ Int√©gration ChatGPT

## M√©thode 1 : Custom GPT

### Cr√©er un Custom GPT

1. Allez sur [chat.openai.com](https://chat.openai.com)
2. Cliquez sur votre nom > **My GPTs** > **Create a GPT**
3. Dans **Configure** :
   - **Name** : BetTracker Pro Assistant
   - **Description** : Assistant pour g√©rer vos paris hippiques
   - **Instructions** : Copiez le texte ci-dessous

### Instructions

\`\`\`
Tu es un assistant sp√©cialis√© dans l'analyse de paris hippiques avec BetTracker Pro.
Tu as acc√®s √† 11 outils pour aider l'utilisateur :

1. get_user_stats - Statistiques de paris
2. get_recent_bets - Derniers paris
3. get_budget_status - √âtat du budget
4. get_user_settings - Param√®tres
5. get_pmu_stats - Stats PMU globales
6. get_my_hippodromes - Liste des hippodromes
7. get_hippodrome_stats - Stats par hippodrome
8. get_my_bet_horses - Performances des chevaux
9. get_my_jockey_stats - Stats des jockeys
10. get_my_horse_jockey_combinations - Combinaisons
11. get_my_cross_stats - Statistiques crois√©es

Sois pr√©cis, concis et toujours en fran√ßais.
\`\`\`

### Ajouter les Actions

Dans **Actions**, cliquez sur **Create new action** et collez :

\`\`\`yaml
openapi: 3.0.0
info:
  title: BetTracker Pro API
  version: 1.0.0
servers:
  - url: http://localhost:3001/api/v1
paths:
  /tools/execute:
    post:
      operationId: executeTool
      summary: Execute a BetTracker tool
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                tool:
                  type: string
                arguments:
                  type: object
      responses:
        '200':
          description: Success
      security:
        - ApiKeyAuth: []
components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-Key
\`\`\`

### Configuration de l'authentification

1. Dans **Authentication**, s√©lectionnez **API Key**
2. **Header name** : \`X-API-Key\`
3. **API Key** : Votre cl√© BetTracker (btk_...)

## M√©thode 2 : API OpenAI

### Code JavaScript

\`\`\`javascript
import OpenAI from 'openai';

const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY
});

const tools = [
  {
    type: 'function',
    function: {
      name: 'get_user_stats',
      description: 'Obtenir les statistiques de paris',
      parameters: {
        type: 'object',
        properties: {
          period: {
            type: 'string',
            enum: ['all', 'month', 'week']
          }
        }
      }
    }
  }
];

const response = await openai.chat.completions.create({
  model: 'gpt-4',
  messages: [
    { role: 'user', content: 'Montre-moi mes stats du mois' }
  ],
  tools: tools
});
\`\`\`

## ‚úÖ Test

Demandez √† votre Custom GPT :

> "Montre-moi mes statistiques de paris du mois"

ChatGPT devrait appeler l'API BetTracker et vous afficher vos stats !

## üìö Ressources

- [API REST](/docs/api)
- [Serveur MCP](/docs/mcp-server)
- [Exemples de code](/docs/examples)
`,
    status: 'published',
    seoTitle: 'Int√©gration ChatGPT - BetTracker Pro',
    seoDescription: 'Guide pour int√©grer BetTracker Pro avec ChatGPT via Custom GPT ou l\'API OpenAI',
    seoKeywords: 'chatgpt, custom gpt, openai, bettracker, integration',
  },
  {
    title: 'Exemples de code',
    slug: 'examples',
    excerpt: 'Exemples pratiques d\'utilisation de l\'API BetTracker Pro en JavaScript, Python, React',
    content: `
# üìö Exemples de code

## JavaScript / Node.js

### Client API simple

\`\`\`javascript
class BetTrackerClient {
  constructor(apiKey) {
    this.apiKey = apiKey;
    this.baseURL = 'http://localhost:3001/api/v1';
  }

  async executeTool(tool, args = {}) {
    const response = await fetch(\`\${this.baseURL}/tools/execute\`, {
      method: 'POST',
      headers: {
        'X-API-Key': this.apiKey,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({ tool, arguments: args })
    });
    
    if (!response.ok) {
      throw new Error(\`API error: \${response.statusText}\`);
    }
    
    return response.json();
  }

  async getUserStats(period = 'month') {
    return this.executeTool('get_user_stats', { period });
  }

  async getHippodromes() {
    return this.executeTool('get_my_hippodromes');
  }

  async getBestCombinations() {
    return this.executeTool('get_my_horse_jockey_combinations');
  }
}

// Utilisation
const client = new BetTrackerClient('btk_votre_cl√©');

const stats = await client.getUserStats('month');
console.log('Statistiques:', stats.data);

const hippodromes = await client.getHippodromes();
console.log('Hippodromes:', hippodromes.data);
\`\`\`

## Python

### Client API complet

\`\`\`python
import requests
from typing import Dict, Any, Optional

class BetTrackerClient:
    def __init__(self, api_key: str, base_url: str = 'http://localhost:3001/api/v1'):
        self.api_key = api_key
        self.base_url = base_url
        self.session = requests.Session()
        self.session.headers.update({'X-API-Key': api_key})
    
    def execute_tool(self, tool: str, arguments: Optional[Dict[str, Any]] = None) -> Dict:
        response = self.session.post(
            f'{self.base_url}/tools/execute',
            json={'tool': tool, 'arguments': arguments or {}}
        )
        response.raise_for_status()
        return response.json()
    
    def get_user_stats(self, period: str = 'month') -> Dict:
        return self.execute_tool('get_user_stats', {'period': period})
    
    def get_hippodromes(self) -> Dict:
        return self.execute_tool('get_my_hippodromes')
    
    def get_best_combinations(self) -> Dict:
        return self.execute_tool('get_my_horse_jockey_combinations')

# Utilisation
client = BetTrackerClient('btk_votre_cl√©')

stats = client.get_user_stats('month')
print('Statistiques:', stats['data'])

hippodromes = client.get_hippodromes()
print('Hippodromes:', hippodromes['data'])
\`\`\`

## React

### Hook personnalis√©

\`\`\`typescript
import { useState, useEffect } from 'react';

const API_KEY = process.env.NEXT_PUBLIC_BETTRACKER_API_KEY;
const API_URL = 'http://localhost:3001/api/v1';

export function useBetTrackerTool<T>(tool: string, args?: any) {
  const [data, setData] = useState<T | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<Error | null>(null);

  useEffect(() => {
    async function fetchData() {
      try {
        setLoading(true);
        const response = await fetch(\`\${API_URL}/tools/execute\`, {
          method: 'POST',
          headers: {
            'X-API-Key': API_KEY!,
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({ tool, arguments: args })
        });

        if (!response.ok) throw new Error('API error');

        const result = await response.json();
        setData(result.data);
      } catch (err) {
        setError(err as Error);
      } finally {
        setLoading(false);
      }
    }

    fetchData();
  }, [tool, JSON.stringify(args)]);

  return { data, loading, error };
}

// Utilisation dans un composant
function StatsComponent() {
  const { data, loading, error } = useBetTrackerTool('get_user_stats', { period: 'month' });

  if (loading) return <div>Chargement...</div>;
  if (error) return <div>Erreur: {error.message}</div>;

  return (
    <div>
      <h2>Statistiques du mois</h2>
      <p>Paris: {data.total_bets}</p>
      <p>Taux de r√©ussite: {data.win_rate}</p>
      <p>ROI: {data.roi}</p>
    </div>
  );
}
\`\`\`

## Dashboard complet

### R√©cup√©rer toutes les donn√©es

\`\`\`javascript
async function getDashboardData(apiKey) {
  const client = new BetTrackerClient(apiKey);
  
  const [stats, hippodromes, horses, jockeys, combinations] = await Promise.all([
    client.getUserStats('month'),
    client.getHippodromes(),
    client.executeTool('get_my_bet_horses'),
    client.executeTool('get_my_jockey_stats'),
    client.getBestCombinations()
  ]);
  
  return {
    stats: stats.data,
    hippodromes: hippodromes.data,
    topHorses: horses.data.top_10_chevaux,
    topJockeys: jockeys.data.top_10_jockeys,
    bestCombinations: combinations.data.top_10_combinaisons
  };
}
\`\`\`

## üìö Ressources

- [API REST](/docs/api)
- [Serveur MCP](/docs/mcp-server)
- [Int√©gration ChatGPT](/docs/chatgpt)
`,
    status: 'published',
    seoTitle: 'Exemples de code - API BetTracker Pro',
    seoDescription: 'Exemples pratiques d\'utilisation de l\'API BetTracker Pro en JavaScript, Python et React',
    seoKeywords: 'exemples, code, javascript, python, react, api, bettracker',
  },
];

async function createDocs() {
  console.log('üöÄ Cr√©ation des pages de documentation...\n');

  for (const doc of docs) {
    try {
      console.log(`üìù Cr√©ation de "${doc.title}"...`);
      const response = await api.post('/cms/pages', doc);
      console.log(`‚úÖ Page cr√©√©e avec succ√®s (ID: ${response.data.id})\n`);
    } catch (error: any) {
      if (error.response?.status === 409) {
        console.log(`‚ö†Ô∏è  Page "${doc.title}" existe d√©j√†, mise √† jour...\n`);
      } else {
        console.error(`‚ùå Erreur lors de la cr√©ation de "${doc.title}":`, error.message);
        console.error('D√©tails:', error.response?.data || error.message);
      }
    }
  }

  console.log('‚ú® Termin√© !');
}

createDocs().catch(console.error);
